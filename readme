Домашнє завдання №10 (робота з Express.js)
НЕОБХІДНО створити на базі фреймворку Express сервер обробки запитів CRUD
API (CRUD це Create/Read/Update/Delete), який буде обробляти масив даних
студентів наступної структури:
[
 { id: 10, firstName:”Marty”, lastName: “McFly”, group: 101, rate: 9.5 },
 { id: 11, firstName:”Squidward”, lastName: “Tentakles”, group: 102, rate: 6.1 },
 { id: 12, firstName:”Donald”, lastName: “Duck”, group: 102, rate: 7.2 },
 { id: 13, firstName:”Sarah”, lastName: “Connor”, group: 101, rate: 8.3 },
 { id: 14, firstName:”Yugin”, lastName: “Krabbs”, group: 102, rate: 6.8 },
]
Масив даних з цими базовими записами має знаходитись у глобальній зоні
видимості скрипту та бути доступним до змін та маніпулювання даними.
Сервер має обробляти запити та виконувати дії:
1. роут GET /students віддає набір даних студентів з масиву даних
2. роут POST /students/:id створює новий запис у масиві щодо нового
студента
3. роут GET /students/:id віддає дані з масиву щодо конкретного студента за
його ідентифікатором
4. роут PUT /students/:id змінює дані у масиві щодо конкретного студента за
його ідентифікатором
5. роут DELETE /students/:id видаляє з масиву запис студента за його
ідентифікатором
6. Всі дані віддаються у форматі JSON
7. При створенні чи редагуванні запису поля firstName, lastName мають не
бути пустими, передбачити перевірку та повернення помилки якщо передані
значення цих полів є пусті.
Виконання роботи необхідно показати у вигляді посилання на репозиторій з кодом
але без папки node_modules.
Правильно виконане завдання принесе студенту 9 балів.
Додаткові бали (до +3 балів включно) будуть надані за:
 додати до роуту GET /students сортування за полями group, rate яке буде
здійснюватись через аналіз параметра запиту sortBy
 одати до роуту GET /students можливість пагінації даних з використанням
параметрів запиту limit та offset
 зробити авторизацію через сесію — дані віддаються лише після того, як
користувач авторизувався через роут POST /login з логіном admin та
паролем admin